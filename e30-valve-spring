import math

# OBJ File Writer
def write_obj(filename, vertices, faces):
    with open(filename, "w") as file:
        file.write("# Aggressive Single Spring Model\n")
        # Write vertices
        for vertex in vertices:
            file.write(f"v {vertex[0]} {vertex[1]} {vertex[2]}\n")
        # Write faces (OBJ indices start at 1, not 0)
        for face in faces:
            face_indices = " ".join(str(idx + 1) for idx in face)
            file.write(f"f {face_indices}\n")

# Spring parameters
outer_diameter = 32.5  # mm
wire_diameter = 5.6    # mm
spring_height = 50.0   # mm
turns = 8              # Number of coils
segments_per_turn = 75  # Higher resolution

# Derived parameters
radius = outer_diameter / 2
pitch = spring_height / turns

# Generate vertices
vertices = []
faces = []
for turn in range(turns * segments_per_turn + 1):
    theta = 2 * math.pi * turn / segments_per_turn
    x = radius * math.cos(theta)
    y = radius * math.sin(theta)
    z = pitch * turn / segments_per_turn
    for i in range(8):  # Higher resolution circular cross-section (8 points per section)
        angle = 2 * math.pi * i / 8
        dx = (wire_diameter / 2) * math.cos(angle)
        dy = (wire_diameter / 2) * math.sin(angle)
        vertices.append((x + dx, y + dy, z))

# Generate faces
for i in range(turns * segments_per_turn):
    for j in range(8):
        # Connect each set of cross-section points to form a quad
        current = i * 8 + j
        next = i * 8 + (j + 1) % 8
        upper = current + 8
        upper_next = next + 8
        faces.append([current, next, upper_next])
        faces.append([current, upper_next, upper])

# Write to OBJ file
write_obj("aggressive_spring.obj", vertices, faces)

print("Aggressive single-spring model saved as aggressive_spring.obj")
